// Code generated by go-enum DO NOT EDIT.
// Version: -
// Revision: -
// Build Date: -
// Built By: -

package consts

import (
	"database/sql/driver"
	"errors"
	"fmt"
	"strings"
)

const (
	// AppDictionary is a App of type dictionary.
	AppDictionary App = "dictionary"
	// AppUser is a App of type user.
	AppUser App = "user"
	// AppSetting is a App of type setting.
	AppSetting App = "setting"
)

var ErrInvalidApp = fmt.Errorf("not a valid App, try [%s]", strings.Join(_AppNames, ", "))

var _AppNames = []string{
	string(AppDictionary),
	string(AppUser),
	string(AppSetting),
}

// AppNames returns a list of possible string values of App.
func AppNames() []string {
	tmp := make([]string, len(_AppNames))
	copy(tmp, _AppNames)
	return tmp
}

// AppValues returns a list of the values for App
func AppValues() []App {
	return []App{
		AppDictionary,
		AppUser,
		AppSetting,
	}
}

// String implements the Stringer interface.
func (x App) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x App) IsValid() bool {
	_, err := ParseApp(string(x))
	return err == nil
}

var _AppValue = map[string]App{
	"dictionary": AppDictionary,
	"user":       AppUser,
	"setting":    AppSetting,
}

// ParseApp attempts to convert a string to a App.
func ParseApp(name string) (App, error) {
	if x, ok := _AppValue[name]; ok {
		return x, nil
	}
	return App(""), fmt.Errorf("%s is %w", name, ErrInvalidApp)
}

var errAppNilPtr = errors.New("value pointer is nil") // one per type for package clashes

// Scan implements the Scanner interface.
func (x *App) Scan(value interface{}) (err error) {
	if value == nil {
		*x = App("")
		return
	}

	// A wider range of scannable types.
	// driver.Value values at the top of the list for expediency
	switch v := value.(type) {
	case string:
		*x, err = ParseApp(v)
	case []byte:
		*x, err = ParseApp(string(v))
	case App:
		*x = v
	case *App:
		if v == nil {
			return errAppNilPtr
		}
		*x = *v
	case *string:
		if v == nil {
			return errAppNilPtr
		}
		*x, err = ParseApp(*v)
	default:
		return errors.New("invalid type for App")
	}

	return
}

// Value implements the driver Valuer interface.
func (x App) Value() (driver.Value, error) {
	return x.String(), nil
}

// Set implements the Golang flag.Value interface func.
func (x *App) Set(val string) error {
	v, err := ParseApp(val)
	*x = v
	return err
}

// Get implements the Golang flag.Getter interface func.
func (x *App) Get() interface{} {
	return *x
}

// Type implements the github.com/spf13/pFlag Value interface.
func (x *App) Type() string {
	return "App"
}

type NullApp struct {
	App   App
	Valid bool
}

func NewNullApp(val interface{}) (x NullApp) {
	err := x.Scan(val) // yes, we ignore this error, it will just be an invalid value.
	_ = err            // make any errcheck linters happy
	return
}

// Scan implements the Scanner interface.
func (x *NullApp) Scan(value interface{}) (err error) {
	if value == nil {
		x.App, x.Valid = App(""), false
		return
	}

	err = x.App.Scan(value)
	x.Valid = (err == nil)
	return
}

// Value implements the driver Valuer interface.
func (x NullApp) Value() (driver.Value, error) {
	if !x.Valid {
		return nil, nil
	}
	// driver.Value accepts int64 for int values.
	return string(x.App), nil
}

type NullAppStr struct {
	NullApp
}

func NewNullAppStr(val interface{}) (x NullAppStr) {
	x.Scan(val) // yes, we ignore this error, it will just be an invalid value.
	return
}

// Value implements the driver Valuer interface.
func (x NullAppStr) Value() (driver.Value, error) {
	if !x.Valid {
		return nil, nil
	}
	return x.App.String(), nil
}
