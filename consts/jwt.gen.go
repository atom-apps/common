// Code generated by go-enum DO NOT EDIT.
// Version: -
// Revision: -
// Build Date: -
// Built By: -

package consts

import (
	"database/sql/driver"
	"errors"
	"fmt"
	"strings"
)

const (
	// JwtCtx is a Jwt of type ctx.
	JwtCtx Jwt = "____jwtClaims{}"
	// JwtHttpHeader is a Jwt of type http_header.
	JwtHttpHeader Jwt = "Authorization"
	// JwtTokenPrefix is a Jwt of type token_prefix.
	JwtTokenPrefix Jwt = "Bearer"
)

var ErrInvalidJwt = fmt.Errorf("not a valid Jwt, try [%s]", strings.Join(_JwtNames, ", "))

var _JwtNames = []string{
	string(JwtCtx),
	string(JwtHttpHeader),
	string(JwtTokenPrefix),
}

// JwtNames returns a list of possible string values of Jwt.
func JwtNames() []string {
	tmp := make([]string, len(_JwtNames))
	copy(tmp, _JwtNames)
	return tmp
}

// JwtValues returns a list of the values for Jwt
func JwtValues() []Jwt {
	return []Jwt{
		JwtCtx,
		JwtHttpHeader,
		JwtTokenPrefix,
	}
}

// String implements the Stringer interface.
func (x Jwt) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x Jwt) IsValid() bool {
	_, err := ParseJwt(string(x))
	return err == nil
}

var _JwtValue = map[string]Jwt{
	"____jwtClaims{}": JwtCtx,
	"Authorization":   JwtHttpHeader,
	"Bearer":          JwtTokenPrefix,
}

// ParseJwt attempts to convert a string to a Jwt.
func ParseJwt(name string) (Jwt, error) {
	if x, ok := _JwtValue[name]; ok {
		return x, nil
	}
	return Jwt(""), fmt.Errorf("%s is %w", name, ErrInvalidJwt)
}

var errJwtNilPtr = errors.New("value pointer is nil") // one per type for package clashes

// Scan implements the Scanner interface.
func (x *Jwt) Scan(value interface{}) (err error) {
	if value == nil {
		*x = Jwt("")
		return
	}

	// A wider range of scannable types.
	// driver.Value values at the top of the list for expediency
	switch v := value.(type) {
	case string:
		*x, err = ParseJwt(v)
	case []byte:
		*x, err = ParseJwt(string(v))
	case Jwt:
		*x = v
	case *Jwt:
		if v == nil {
			return errJwtNilPtr
		}
		*x = *v
	case *string:
		if v == nil {
			return errJwtNilPtr
		}
		*x, err = ParseJwt(*v)
	default:
		return errors.New("invalid type for Jwt")
	}

	return
}

// Value implements the driver Valuer interface.
func (x Jwt) Value() (driver.Value, error) {
	return x.String(), nil
}

// Set implements the Golang flag.Value interface func.
func (x *Jwt) Set(val string) error {
	v, err := ParseJwt(val)
	*x = v
	return err
}

// Get implements the Golang flag.Getter interface func.
func (x *Jwt) Get() interface{} {
	return *x
}

// Type implements the github.com/spf13/pFlag Value interface.
func (x *Jwt) Type() string {
	return "Jwt"
}

type NullJwt struct {
	Jwt   Jwt
	Valid bool
}

func NewNullJwt(val interface{}) (x NullJwt) {
	err := x.Scan(val) // yes, we ignore this error, it will just be an invalid value.
	_ = err            // make any errcheck linters happy
	return
}

// Scan implements the Scanner interface.
func (x *NullJwt) Scan(value interface{}) (err error) {
	if value == nil {
		x.Jwt, x.Valid = Jwt(""), false
		return
	}

	err = x.Jwt.Scan(value)
	x.Valid = (err == nil)
	return
}

// Value implements the driver Valuer interface.
func (x NullJwt) Value() (driver.Value, error) {
	if !x.Valid {
		return nil, nil
	}
	// driver.Value accepts int64 for int values.
	return string(x.Jwt), nil
}

type NullJwtStr struct {
	NullJwt
}

func NewNullJwtStr(val interface{}) (x NullJwtStr) {
	x.Scan(val) // yes, we ignore this error, it will just be an invalid value.
	return
}

// Value implements the driver Valuer interface.
func (x NullJwtStr) Value() (driver.Value, error) {
	if !x.Valid {
		return nil, nil
	}
	return x.Jwt.String(), nil
}
